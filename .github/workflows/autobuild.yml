#### Automatically build and upload releases to GitHub ####

on:
  workflow_dispatch:
  push:
    tags:
      - "r*"
      - "latest"
    branches:     
      - "autobuild*"
      - "autobuild/*"
    #  - master    
    #  - "*"
  #pull_request: # The branches below must be a subset of the branches in "push"
  #  branches: 
  #    - master
  
name:                               Auto-Build
jobs:
  create_release:
     name:                          Create release
     runs-on:                       ubuntu-20.04
     outputs:
      publish_to_release:           ${{ steps.jamulus-build-vars.outputs.PUBLISH_TO_RELEASE }}
      upload_url:                   ${{ steps.create_release_step.outputs.upload_url }}
      version:                      ${{ steps.jamulus-build-vars.outputs.JAMULUS_VERSION }}
      version_name:                 ${{ steps.jamulus-build-vars.outputs.RELEASE_VERSION_NAME }}
      x_github_workspace:           ${{ steps.jamulus-build-vars.outputs.X_GITHUB_WORKSPACE }} #needed, because matrix can not directly access ${{ github.workspace }} aparrently
      build_flatpack:               ${{ steps.jamulus-build-vars.outputs.BUILD_FLATPACK }}
      

     steps:
         # Checkout code
         - name:                    Checkout code
           uses:                    actions/checkout@v2

         # Set variables
         # Determine release / pre-release
         - name:                    Get Jamulus build info, determine actions & variables
           run:                     python3 ${{ github.workspace }}/.github/actions_scripts/analyse_git_reference.py
           id:                      jamulus-build-vars

         # remove release, if it exists (with this releasetag)
         - name:                    Remove release, if existing (for latest and branches)
           if:                      ${{ contains(steps.jamulus-build-vars.outputs.PUBLISH_TO_RELEASE, 'true') }}
           continue-on-error:       true
           uses:                    dev-drprasad/delete-tag-and-release@v0.1.2
           with:
             delete_release:        true
             tag_name:              ${{ steps.jamulus-build-vars.outputs.RELEASE_TAG }}
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
         # create release (empty, filled by next jobs)
         - name:                    'Create Release ${{steps.jamulus-build-vars.outputs.RELEASE_TAG}}  {{steps.jamulus-build-vars.outputs.RELEASE_TITLE}}'
           if:                      ${{ contains(steps.jamulus-build-vars.outputs.PUBLISH_TO_RELEASE, 'true') }}
           id:                      create_release_step
           uses:                    actions/create-release@v1
           env:
             GITHUB_TOKEN:          ${{ secrets.GITHUB_TOKEN }}
           with:
             tag_name:              ${{ steps.jamulus-build-vars.outputs.RELEASE_TAG }}
             release_name:          ${{ steps.jamulus-build-vars.outputs.RELEASE_TITLE }}
             body_path:             ${{ github.workspace }}/autoLatestChangelog.md
             prerelease:            ${{ steps.jamulus-build-vars.outputs.IS_PRERELEASE }}
             draft:                 false


         ### CANCEL ### can be used for development concerning release-creation
         #- name:                    Cancelthrougherroe
         #  run:                     myundefinedfunction


  release_assets:
    name:                           Build assets for ${{ matrix.config.config_name }}
    needs:                          create_release
    strategy:
      fail-fast:                    false
      matrix: # Think of this like a foreach loop. Basically runs the steps with every combination of the contents of this. More info: https://docs.github.com/en/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
        config:             
           - config_name:           AndroidAPK (artifact+codeql)
             target_os:             android
             building_on_os:        ubuntu-20.04
             cmd1_prebuild:         "sh android/autobuild/autobuild_apk_1_prepare.sh "
             cmd2_build:            "sh android/autobuild/autobuild_apk_2_build.sh "
             cmd3_postbuild:        "sh android/autobuild/autobuild_apk_3_copy_files.sh "
             uses_codeql:           true
             
           - config_name:           Linux (codeQL)
             target_os:             linux
             building_on_os:        ubuntu-20.04
             cmd1_prebuild:         "sh linux/autobuild/codeQL/auto_1_prepare.sh ${{ needs.create_release.outputs.x_github_workspace }}"
             cmd2_build:            "sh linux/autobuild/codeQL/auto_2_build_qt_project.sh "
             cmd3_postbuild:        false 
             uses_codeql:           true
        
           - config_name:           Linux (artifacts)
             target_os:             linux
             building_on_os:        ubuntu-20.04
             cmd1_prebuild:         "sh linux/autobuild/artifacts/autobuild_deb_1_prepare.sh "
             cmd2_build:            "sh linux/autobuild/artifacts/autobuild_deb_2_build.sh "
             cmd3_postbuild:        "sh linux/autobuild/artifacts/autobuild_deb_3_copy_files.sh "
             uses_codeql:           false
             
           - config_name:           MacOS (codeQL)
             target_os:             macos
             building_on_os:        macos-10.15
             cmd1_prebuild:         "sh mac/autobuild/codeQL/autobuild_mac_1_prepare.sh "
             cmd2_build:            "sh mac/autobuild/codeQL/autobuild_mac_2_build.sh "
             cmd3_postbuild:        "sh mac/autobuild/codeQL/autobuild_mac_3_copy_files.sh "
             uses_codeql:           true
             
           - config_name:           MacOS (artifacts)
             target_os:             macos
             building_on_os:        macos-10.15
             cmd1_prebuild:         "sh mac/autobuild/artifacts/autobuild_mac_1_prepare.sh "
             cmd2_build:            "sh mac/autobuild/artifacts/autobuild_mac_2_build.sh "
             cmd3_postbuild:        "sh mac/autobuild/artifacts/autobuild_mac_3_copy_files.sh "
             uses_codeql:           false
             
           - config_name:           Windows (artifact+codeql)
             target_os:             windows
             building_on_os:        windows-latest
             cmd1_prebuild:         powershell ./windows/autobuild/autobuild_windowsinstaller_1_prepare.ps1
             cmd2_build:            powershell ./windows/autobuild/autobuild_windowsinstaller_2_build.ps1
             cmd3_postbuild:        powershell ./windows/autobuild/autobuild_windowsinstaller_3_copy_files.ps1
             uses_codeql:           true 
         
    runs-on:                        ${{ matrix.config.building_on_os }}
    steps:
      # Checkout code
      - name:                       Checkout code
        uses:                       actions/checkout@v2
        with:
          submodules:               true
          
      # Prepare (install QT & dependencies)
      - name:                       "Prepare for ${{ matrix.config.config_name }}"
        if:                         ${{ matrix.config.cmd1_prebuild }}
        run:                        ${{ matrix.config.cmd1_prebuild }}
        env:
          ACTIONS_ALLOW_UNSECURE_COMMANDS: 'true'  # allow setting environment variables
          jamulus_project_path:     ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}
          
      # Initialize CodeQL tools for code-scanning for security
      - name:                       Initialize CodeQL
        if:                         matrix.config.uses_codeql 
        uses:                       github/codeql-action/init@v1
        with:
          languages: 'cpp' 
          # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python' ]
          # Learn more:
          # https://docs.github.com/en/free-pro-team@latest/github/finding-security-vulnerabilities-and-errors-in-your-code/configuring-code-scanning#changing-the-languages-that-are-analyzed

      # Build
      - name:                       "Build for ${{ matrix.config.config_name }}"
        if:                         ${{ matrix.config.cmd2_build }} 
        run:                        ${{ matrix.config.cmd2_build }} ${{ github.workspace }}
        env:
          jamulus_project_path:       ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}
                
      - name:                       "Post-Build for ${{ matrix.config.config_name }}"
        id:                         step_cmd3_postbuild
        if:                         ${{ matrix.config.cmd3_postbuild }}
        run:                        ${{ matrix.config.cmd3_postbuild }} ${{ github.workspace }}
        env:
          jamulus_project_path:       ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}
        
      # Upload Artifact to Job
      - name:                       Upload Artifact 1 to Job
        if:                         ${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
        uses:                       actions/upload-artifact@v2
        with:
          name:                     ${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
          path:                     deploy/${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
          retention-days:           31
          if-no-files-found:        error # 'warn' or 'ignore' are also available, defaults to `warn`
          
      # Upload Artifact to Job
      - name:                       Upload Artifact 2 to Job
        if:                         ${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
        uses:                       actions/upload-artifact@v2
        with:
          name:                     ${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
          path:                     deploy/${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
          retention-days:           31
          if-no-files-found:        error # 'warn' or 'ignore' are also available, defaults to `warn`

      # Upload Artifact to Release
      - name:                       Upload Artifact 1 to Release
        if:                         ${{ (steps.step_cmd3_postbuild.outputs.artifact_1 != '') &&  contains(needs.create_release.outputs.publish_to_release, 'true') }}
        id:                         upload-release-asset1
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path:               deploy/${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
          asset_name:               ${{ steps.step_cmd3_postbuild.outputs.artifact_1 }}
          asset_content_type:       application/octet-stream
      # Upload Artifact to Release
      - name:                       Upload Artifact 2 to Release
        if:                         ${{ (steps.step_cmd3_postbuild.outputs.artifact_2 != '') &&  contains(needs.create_release.outputs.publish_to_release, 'true') }}
        id:                         upload-release-asset2
        uses:                       actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
          asset_path:               deploy/${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
          asset_name:               ${{ steps.step_cmd3_postbuild.outputs.artifact_2 }}
          asset_content_type:       application/octet-stream
          
      # Run CodeQL tools for code-scanning for security
      - name:                       Perform CodeQL Analysis
        if:                         matrix.config.uses_codeql   
        uses:                       github/codeql-action/analyze@v1
        
          
  ## Builds a Linux flatpack ##
  flatpak-builder:
    name: "Build Flatpak (artifact)"
    if:                         ${{ contains(needs.create_release.outputs.build_flatpack, 'true') }}
    runs-on: ubuntu-20.04
    needs: [create_release]
    container:
      image: docker.io/bilelmoussaoui/flatpak-github-actions
      options: --privileged
    steps:
    - uses: actions/checkout@v2
    - id:                         flatpak-prepare
      name:                       Change branch name in manifest
      run:                        python3 io.jamulus.Jamulus.prepare.py $GITHUB_SHA
      working-directory:          ./distributions/
      env:
          jamulus_project_path:       ${{ github.workspace }}
          jamulus_buildversionstring: ${{ needs.create_release.outputs.version_name }}
    - uses:                       bilelmoussaoui/flatpak-github-actions@v2
      with: 
        bundle:                   "${{ steps.flatpak-prepare.outputs.flatpak_bundle }}"
        manifest-path:            "distributions/io.jamulus.Jamulus.json"
        
    # download artifact
    - id:                         flatpak-download
      uses:                       actions/download-artifact@v2
      with:
        name:                     ${{ steps.flatpak-prepare.outputs.flatpak_name }}
        path:                     ~/${{ steps.flatpak-prepare.outputs.flatpak_name }}
        
    - name:                       echo download-path
      run:                        "echo ${{steps.flatpak-download.outputs.download-path}}"
    - name:                       ls download-path
      run:                        "ls ${{steps.flatpak-download.outputs.download-path}}"
    - name:                       ls githome ~
      run:                        "ls ~/"
        
    # Upload Artifact to Release
    - name:                       Upload Flatpack
      if:                         ${{ contains(needs.create_release.outputs.publish_to_release, 'true') }}
      id:                         upload-release-asset
      uses:                       actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN:             ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url:               ${{ needs.create_release.outputs.upload_url }} # See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        asset_path:               ${{steps.flatpak-download.outputs.download-path}}/${{ steps.flatpak-prepare.outputs.flatpak_bundle }}
        asset_name:               ${{ steps.flatpak-prepare.outputs.flatpak_name }}
        asset_content_type:       application/octet-stream
